import sqlite3
from random import sample

import requests
import urllib.parse as urlparse

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from bs4 import BeautifulSoup
from aiogram.dispatcher.filters import Text, state
from aiogram.utils import executor, markdown
from aiogram.utils.exceptions import MessageNotModified
from forbidden_words import forbidden_words

from config import TOKEN
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

con = sqlite3.connect('ask_everyones.db')
cur = con.cursor()

tags = ['üì∞–ù–æ–≤–æ—Å—Ç–∏', 'üì±–ë–ª–æ–≥–∏', 'üíª–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'ü§°–Æ–º–æ—Ä', 'üíº–ü–æ–ª–∏—Ç–∏–∫–∞', 'üíµ–§–∏–Ω–∞–Ω—Å—ã', 'üë®‚Äçüè´–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        'üé∏–ú—É–∑—ã–∫–∞', 'üï∂–ë–∏–∑–Ω–µ—Å', 'üìä–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üé•–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã', 'üìö–ö–Ω–∏–≥–∏', 'üèÄ–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç', 'üó∫–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        'üåÑ–ò—Å–∫—É—Å—Å—Ç–≤–æ', 'ü•º–ú–æ–¥–∞', 'üíä–ú–µ–¥–∏—Ü–∏–Ω–∞', 'üéÆ–ò–≥—Ä—ã', 'üçï–ï–¥–∞', 'ü™°–†—É–∫–æ–¥–µ–ª–∏–µ', 'üß©–î—Ä—É–≥–æ–µ']

tags_db = ['news', 'blog', 'technologies', 'humor', 'politics', 'finance', 'science_and_education', 'music', 'business',
           'marketing', 'movies', 'books', 'health_and_sports', 'journeys', 'art', 'fashion', 'medicine', 'games',
           'meal', 'handiwork', 'other']

valid_link = ''

deceptions = {'–∞': ['–∞', 'a', '@'],
              '–±': ['–±', '6', 'b'],
              '–≤': ['–≤', 'b', 'v'],
              '–≥': ['–≥', 'r', 'g'],
              '–¥': ['–¥', 'd'],
              '–µ': ['–µ', 'e'],
              '—ë': ['—ë', 'e'],
              '–∂': ['–∂', 'zh', '*', '}|{'],
              '–∑': ['–∑', '3', 'z'],
              '–∏': ['–∏', 'u', 'i'],
              '–π': ['–π', 'u', 'i'],
              '–∫': ['–∫', 'k', 'i{', '|{'],
              '–ª': ['–ª', 'l', 'ji'],
              '–º': ['–º', 'm'],
              '–Ω': ['–Ω', 'h', 'n'],
              '–æ': ['–æ', 'o', '0'],
              '–ø': ['–ø', 'n', 'p'],
              '—Ä': ['—Ä', 'r', 'p'],
              '—Å': ['—Å', 'c', 's'],
              '—Ç': ['—Ç', 'm', 't'],
              '—É': ['—É', 'y', 'u'],
              '—Ñ': ['—Ñ', 'f'],
              '—Ö': ['—Ö', 'x', 'h', '}{'],
              '—Ü': ['—Ü', 'c', 'u,'],
              '—á': ['—á', 'ch'],
              '—à': ['—à', 'sh'],
              '—â': ['—â', 'sch'],
              '—å': ['—å', 'b'],
              '—ã': ['—ã', 'bi'],
              '—ä': ['—ä'],
              '—ç': ['—ç', 'e'],
              '—é': ['—é', 'io'],
              '—è': ['—è', 'ya']
              }  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏


class LinkRatings:  # –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–æ–π
    def __init__(self, message):
        self.message = message
        self.all_about_link = []
        self.all_about_opinion = []

    def checking_link(self):
        # —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        if self.message.text[:12] == 'https://t.me':
            if urlparse.urlparse(self.message.text).scheme:
                try:
                    # —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ —Å –Ω–µ–µ –ø–∞—Ä—Å—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª
                    opening_link = requests.get(self.message.text)
                    checking_for_channel = BeautifulSoup(opening_link.text, features="html.parser")
                    checking_for_channel = \
                    checking_for_channel.find_all('a', attrs={'class': 'tgme_action_button_new'})[0]
                    if str(checking_for_channel.text) == 'View in Telegram':
                        return 'normal'
                    else:
                        return 'this is not a channel'
                except Exception:
                    return 'this is not a channel'
            else:
                return 'this is not a link'
        else:
            return 'this is not a link'

    def creation_in_absence_of(self):
        # –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç
        if not cur.execute("SELECT * FROM opinion_about_link WHERE link=?",
                           (self.message.text,)).fetchall():
            cur.execute(
                '''INSERT INTO opinion_about_link
                 VALUES(?, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)''',
                (self.message.text,))
            con.commit()
        self.all_about_link = \
            cur.execute("SELECT * FROM opinion_about_link WHERE link=?",
                        (self.message.text,)).fetchall()[0]

        if not cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                           (self.message.text, self.message.from_user.id,)).fetchall():
            cur.execute(
                '''INSERT INTO user_evaluation VALUES(?, ?, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)''',
                (self.message.from_user.id, self.message.text,))
            con.commit()
        self.all_about_opinion = \
            cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                        (self.message.text, self.message.from_user.id,)).fetchall()[0]

    def creating_response(self):
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –µ–º—É –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Å—ã–ª–∫–∏
        rating = cur.execute(f"SELECT AVG(estimation) FROM user_evaluation WHERE estimated_link=?",
                             (self.message.text,)).fetchall()[0][0]
        ready_answer = f'–°—Å—ã–ª–∫–∞: {self.message.text}' \
                       f'\n' \
                       f'\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}‚≠êÔ∏è' \
                       f'\n' \
                       f'\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏:'

        for j in range(len(tags)):
            ready_answer += f'\n{tags[j]}:' \
                            f' {self.all_about_link[j + 2]}'
        return ready_answer


class CallbackResponses:  # –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏
    def __init__(self, callback):
        self.callback = callback

    def creating_text_click_response(self):
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ü–µ–Ω–∫–µ —Å—Å—ã–ª–∫–∏
        return f'–û—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞: {self.callback.data.split()[1]}\n\n–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –∏ –≤—ã–±–µ—Ä–µ—Ç–µ' \
               f' –Ω–µ –±–æ–ª–µ–µ 3 —Ç–µ–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞'

    def creating_buttons_click_response(self, all_about_link, all_about_opinion):
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—è—é—â–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        markup = types.InlineKeyboardMarkup()
        list_for_number = []
        for j in range(1, 11):  # —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 –∫–Ω–æ–ø–æ–∫ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Å—ã–ª–∫–∏
            if j == all_about_opinion[2]:
                # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞
                list_for_number.append(types.InlineKeyboardButton(text=f'{j}üåü',
                                                                  callback_data=f"general_assessment"
                                                                                f" {self.callback.data.split()[1]}"
                                                                                f" {j}"))
            else:
                # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞
                list_for_number.append(types.InlineKeyboardButton(text=f'{j}‚≠êÔ∏è',
                                                                  callback_data=f"general_assessment"
                                                                                f" {self.callback.data.split()[1]}"
                                                                                f" {j}"))
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 5 –≤ —Ä—è–¥
        markup.row(list_for_number[0], list_for_number[1], list_for_number[2], list_for_number[3], list_for_number[4])
        markup.row(list_for_number[5], list_for_number[6], list_for_number[7], list_for_number[8], list_for_number[9])
        list_for_number = []
        for j in range(len(tags)):  # —Ç–∞–∫–æ–π –∂–µ —Ü–∏–∫–ª, –Ω–æ —É–∂–µ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            opinion = all_about_link[j + 2]
            if all_about_opinion[j + 3] == 0:
                list_for_number.append(types.InlineKeyboardButton(text=f'‚òëÔ∏è{tags[j]}: {opinion}',
                                                                  callback_data=f"tags_assessment"
                                                                                f" {self.callback.data.split()[1]}"
                                                                                f" {j}"))
            else:
                list_for_number.append(types.InlineKeyboardButton(text=f'‚úÖ {tags[j]}: {opinion}',
                                                                  callback_data=f"tags_assessment"
                                                                                f" {self.callback.data.split()[1]}"
                                                                                f" {j}"))
        for j in range(0, len(list_for_number)):  # –¶–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
            if j % 2 == 1:
                markup.row(list_for_number[j - 1], list_for_number[j])
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç–∑—ã–≤–æ–º
        if cur.execute("SELECT * FROM user_reviews WHERE link=?  AND user=?",
                       (self.callback.data.split()[1], self.callback.from_user.id,)).fetchall():
            markup.row(types.InlineKeyboardButton(text='üóë–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤',
                                                  callback_data=f"deleting_review"
                                                                f" {self.callback.data.split()[1]}"))
        else:
            markup.row(types.InlineKeyboardButton(text='üìù–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤',
                                                  callback_data=f"waiting_for_review"
                                                                f" {self.callback.data.split()[1]}"))
        return markup


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
    await bot.send_message(message.from_user.id,
                           f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–±–µ –∫–∞–Ω–∞–ª—ã'
                           f' –∏ —É–∑–Ω–∞—Ç—å –º–Ω–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∏—Ö'
                           f'\nüëâ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏ /help!')


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
    await bot.send_message(message.from_user.id,
                           f'–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —É–∑–Ω–∞—Ç—å –º–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö telegram –∫–∞–Ω–∞–ª–∞—Ö'
                           f' –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É'
                           f'\n–¢–∞–∫–∂–µ —Å–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ç–µ–º–∞—Ç–∏–∫–µ'
                           f'\n'
                           f'\n–í—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–π telegram –∫–∞–Ω–∞–ª'
                           f'\n'
                           f'\n–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, –ø–æ—Å—ã–ª–∞—è —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã'
                           f'\n/help - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ'
                           f'\n/top - –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–æ–æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


@dp.message_handler(commands=['top'])
async def process_help_command(message: types.Message):
    # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /top
    list_for_number = []
    markup = types.InlineKeyboardMarkup()
    for j in range(len(tags_db)):  # –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        list_for_number.append(types.InlineKeyboardButton(text=f'{tags[j]}',
                                                          callback_data=f"selection_in_top {j}"))
    for j in range(0, len(list_for_number)):  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if j % 2 == 1:
            markup.row(list_for_number[j - 1], list_for_number[j])
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ª–∏–¥–µ—Ä–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞',
                           reply_markup=markup)


@dp.message_handler()
async def response_to_link(message: types.Message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
    link = LinkRatings(message)
    ready_verification = link.checking_link()  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ready_verification == 'normal':
        link.creation_in_absence_of()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–î–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É",
                                                callback_data=f"link_evaluation {message.text}"))
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã",
                                                callback_data=f"link_reviews {message.text}"))
        await bot.send_message(message.from_user.id, link.creating_response(), reply_markup=keyboard)

    elif ready_verification == 'this is not a channel':
        await bot.send_message(message.from_user.id, '‚òπÔ∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏.'
                                                     '\n'
                                                     '\nü§î–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–æ, —á—Ç–æ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–µ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª'
                                                     '\n‚û°Ô∏è–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help,'
                                                     ' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é')
    else:
        await bot.send_message(message.from_user.id, '‚òπÔ∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏.'
                                                     '\n'
                                                     '\nü§î–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–æ, —á—Ç–æ –≤—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π'
                                                     '\n‚û°Ô∏è–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help,'
                                                     ' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é')


@dp.callback_query_handler(Text(startswith='link_reviews'))
async def showing_reviews(callback: types.CallbackQuery):
    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –æ—Ç–∑—ã–≤–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π
    list_for_number = []
    markup = types.InlineKeyboardMarkup()
    for j in range(0, 11):
        if j != 0:
            list_for_number.append(types.InlineKeyboardButton(text=f'{j}‚≠êÔ∏è',
                                                              callback_data=f"general_reviews"
                                                                            f" {callback.data.split()[1]}"
                                                                            f" {j}"))
        else:
            list_for_number.append(types.InlineKeyboardButton(text=f'‚ùî–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏',
                                                              callback_data=f"general_reviews"
                                                                            f" {callback.data.split()[1]}"
                                                                            f" {j}"))
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ –≤—ã–±–æ—Ä –æ—Ç–∑—ã–≤–∞
    markup.row(list_for_number[1], list_for_number[2], list_for_number[3], list_for_number[4], list_for_number[5])
    markup.row(list_for_number[6], list_for_number[7], list_for_number[8], list_for_number[9], list_for_number[10])
    markup.row(list_for_number[0])
    await bot.send_message(callback.from_user.id, f'üë§ –†–∞–∑–Ω—ã–µ –ª—é–¥–∏ –æ—Å—Ç–∞–≤–ª—è–ª–∏ —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã '
                                                  f'–∏ –æ–Ω–∏ –ø–æ-—Ä–∞–∑–Ω–æ–º—É –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É'
                                                  f'\n'
                                                  f'\n–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –ª—é–¥–µ–π —Ç—ã –±—ã'
                                                  f' —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', reply_markup=markup)


@dp.callback_query_handler(Text(startswith='general_reviews'))
async def showing_reviews(callback: types.CallbackQuery):
    feedback = []
    for j in cur.execute("SELECT user FROM user_evaluation WHERE estimation = ? AND estimated_link = ?",
                         (callback.data.split()[2], callback.data.split()[1],)).fetchall():
        feedback.append(cur.execute("SELECT * FROM user_reviews WHERE link=?  AND user=?",
                                    (callback.data.split()[1], j[0],)).fetchall()[0])
    # –í—ã–≤–æ–¥ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    print(feedback)
    if feedback:  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Å—ã–ª–∫—É
        ready_message = ''
        if len(feedback) <= 5:  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            for j in range(len(feedback)):
                ready_message += '*' * int(len(feedback[j][0])) + ': ' + feedback[j][2] + '\n' * 2
        else:
            sp = sample(feedback, 5)
            for j in range(5):
                ready_message += '*' * int(len(sp[j][0])) + ': ' + sp[j][2] + '\n' * 2

        await bot.send_message(callback.from_user.id, ready_message)
    else:
        await bot.send_message(callback.from_user.id, 'üò¶–ü–æ—Ö–æ–∂–µ,'
                                                      ' —á—Ç–æ –ª—é–¥–∏, —Ç–∞–∫ –æ—Ü–µ–Ω–∏–≤—à–∏–µ —Å—Å—ã–ª–∫—É, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞')


@dp.callback_query_handler(Text(startswith='link_evaluation'))
async def evaluation_function(callback: types.CallbackQuery):
    all_about_link = \
        cur.execute("SELECT * FROM opinion_about_link WHERE link=?", (callback.data.split()[1],)).fetchall()[0]
    all_about_opinion = \
        cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                    (callback.data.split()[1], callback.from_user.id,)).fetchall()[0]
    call = CallbackResponses(callback)
    await bot.send_message(callback.from_user.id, call.creating_text_click_response(),
                           reply_markup=call.creating_buttons_click_response(all_about_link, all_about_opinion))


@dp.callback_query_handler(Text(startswith='general_assessment'))
async def general_assessment_link(callback: types.CallbackQuery):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ —Å—Å—ã–ª–∫–∏
    call = CallbackResponses(callback)
    cur.execute(
        '''UPDATE user_evaluation SET estimation = ? WHERE estimated_link=? AND user=?''',
        (int(callback.data.split()[2]), callback.data.split()[1], callback.from_user.id,))
    con.commit()  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    all_about_link = \
        cur.execute("SELECT * FROM opinion_about_link WHERE link=?", (callback.data.split()[1],)).fetchall()[0]
    all_about_opinion = \
        cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                    (callback.data.split()[1], callback.from_user.id,)).fetchall()[0]
    try:
        # –∑–∞—â–∏—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        await callback.message.edit_reply_markup(
            reply_markup=call.creating_buttons_click_response(all_about_link, all_about_opinion))
    except MessageNotModified:
        pass


@dp.callback_query_handler(Text(startswith='tags_assessment'))
async def tags_assessment_link(callback: types.CallbackQuery):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ —Å—Å—ã–ª–∫–∏
    call = CallbackResponses(callback)
    tag_by_account = int(callback.data.split()[2])
    maximum_tags = 0
    all_about_link = \
        cur.execute("SELECT * FROM opinion_about_link WHERE link=?", (callback.data.split()[1],)).fetchall()[0]
    all_about_opinion = \
        cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                    (callback.data.split()[1], callback.from_user.id,)).fetchall()[0]
    for j in range(len(tags)):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—å –ø—Ä–∏—Å–≤–æ–∏–ª –º–µ–Ω—å—à–µ, —á–µ–º 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Å—Å—ã–ª–∫–µ
        maximum_tags += all_about_opinion[j + 3]
    if maximum_tags >= 3 and not all_about_opinion[tag_by_account + 3]:
        await bot.send_message(callback.from_user.id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Å—ã–ª–∫–µ –±–æ–ª—å—à–µ —á–µ–º 3 —Ç–µ–≥–∞')
    else:
        cur.execute(f'''UPDATE user_evaluation SET {tags_db[tag_by_account]} = ? 
                    WHERE estimated_link=? AND user=?''',
                    ((all_about_opinion[tag_by_account + 3] + 1) % 2, callback.data.split()[1], callback.from_user.id,))
        cur.execute(f'''UPDATE opinion_about_link SET {tags_db[tag_by_account]} = ? WHERE link=?''',
                    (all_about_link[tag_by_account + 2] - 1 + 2 * ((all_about_opinion[tag_by_account + 3] + 1) % 2),
                     callback.data.split()[1],))
        con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_about_link = \
            cur.execute("SELECT * FROM opinion_about_link WHERE link=?", (callback.data.split()[1],)).fetchall()[0]
        all_about_opinion = \
            cur.execute("SELECT * FROM user_evaluation WHERE estimated_link=? AND user=?",
                        (callback.data.split()[1], callback.from_user.id,)).fetchall()[0]
        try:
            # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
            await callback.message.edit_reply_markup(
                reply_markup=call.creating_buttons_click_response(all_about_link, all_about_opinion))
        except MessageNotModified:
            pass


@dp.callback_query_handler(Text(startswith='selection_in_top'))
async def category_leaders(callback: types.CallbackQuery):
    # –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ —Å –ª—É—á—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
    finished_line = f'‚óè–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tags[int(callback.data.split()[1])][1:] + tags[int(callback.data.split()[1])][0]}' \
                    f'\n'
    # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —Å –Ω—É–∂–Ω–æ–π –∫–æ—Ç–µ–≥–æ—Ä–∏–µ–π
    ready_made_top = cur.execute(f"SELECT * FROM opinion_about_link WHERE {tags_db[int(callback.data.split()[1])]}"
                                 f" > 0 ORDER BY overall_rating DESC").fetchall()
    if ready_made_top:
        if len(ready_made_top) <= 10:  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –∫–∞–Ω–∞–ª–æ–≤
            countdown = len(ready_made_top)
        else:
            countdown = 10
        for j in range(countdown):
            rating = cur.execute(f"SELECT AVG(estimation) FROM user_evaluation WHERE estimated_link=?",
                                 (ready_made_top[j][0],)).fetchall()[0][0]
            finished_line += f'\n{j + 1}) {ready_made_top[j][0]}: {rating}‚≠êÔ∏è' \
                             f'\n'
    else:
        finished_line += '\nü§∑–ò–∑–≤–∏–Ω—Ç–µ, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.' \
                         '\n' \
                         '\n‚û°Ô∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –º–µ–Ω—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å —Å–æ –º–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –¥–æ–±–∞–≤–∏–≤ —Ç–µ–≥' \
                         ' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

    await bot.send_message(callback.from_user.id, finished_line)


class WriteAReview(StatesGroup):
    # –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    waiting_for_a_review = State()


@dp.callback_query_handler(Text(startswith='deleting_review'))
async def function_of_deleting_review(callback: types.CallbackQuery):
    # —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    cur.execute("DELETE FROM user_reviews WHERE link=?  AND user=?",
                (callback.data.split()[1], callback.from_user.id,)).fetchall()
    con.commit()
    await bot.send_message(callback.from_user.id, '–í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω')


@dp.callback_query_handler(Text(startswith='waiting_for_review'))
async def feedback_waiting_function(callback: types.CallbackQuery):
    global valid_link
    # –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if cur.execute("SELECT * FROM user_reviews WHERE link=?  AND user=?",
                   (callback.data.split()[1], callback.from_user.id,)).fetchall():
        await bot.send_message(callback.from_user.id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤ –∫ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ')
    else:
        valid_link = callback.data.split()[1]
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞',
                                              callback_data=f"cancellation_of_filling"))
        await WriteAReview.waiting_for_a_review.set()
        await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤'
                                                      '\n'
                                                      '\n‚ùóÔ∏è–ü—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –Ω–∞—Ä—É—à–∞—Ç—å, –∏–Ω–∞—á–µ –æ—Ç–∑—ã–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è'
                                                      '\n'
                                                      '\n‚úÖ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç'
                                                      '\n‚úÖ –ù–µ–±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤'
                                                      '\n'
                                                      '\n‚ùå –ï—Å—Ç—å –º–∞—Ç'
                                                      '\n‚ùå –ï—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á—Ç–æ-–ª–∏–±–æ', reply_markup=markup)


@dp.callback_query_handler(Text(startswith='cancellation_of_filling', ignore_case=True), state='*')
async def cancel_filling(callback: types.CallbackQuery, state: FSMContext):
    # –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    cancel_state = await state.get_state()
    if cancel_state is None:
        return

    await state.finish()
    await bot.send_message(callback.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æüôÇ')


class ObsceneSpeechFilter:
    # –∫–ª–∞—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞
    def __init__(self, text):
        self.text = text

    def check(self):
        for key, value in deceptions.items():
            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –±—É–∫–≤–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è.
            for letter_deceptions in value:
                # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –±—É–∫–≤–µ –≤ –æ—Ç–∑—ã–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                for letter_text in self.text:
                    # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–∏–º–≤–æ–ª–æ–º –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ.
                    if letter_deceptions == letter_text:
                        # –ó–∞–º–µ–Ω—è–µ–º —ç—Ç—É –±—É–∫–≤—É –Ω–∞ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è.
                        self.text = self.text.replace(letter_text, key)

        for word in forbidden_words:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –Ω–∏–º.
            for part in range(len(self.text)):
                fragment = self.text[part: part + len(word)]
                # –ï—Å–ª–∏ –æ—Ç–ª–∏—á–∏–µ —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 25% —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —Ä–∞–≤–Ω—ã.
                if self.calculation_distance(fragment, word) <= len(word) * 0.25:
                    return fragment

    def calculation_distance(self, a, b):
        # –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É a –∏ b
        n, m = len(a), len(b)
        if n > m:  # –¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã n –±—ã–ª–æ –º–µ–Ω—å—à–µ m
            a, b = b, a
            n, m = m, n

        current_row = range(n + 1)
        for i in range(1, m + 1):
            previous_row, current_row = current_row, [i] + [0] * n
            for j in range(1, n + 1):
                add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
                if a[j - 1] != b[i - 1]:
                    change += 1
                current_row[j] = min(add, delete, change)

        return current_row[n]

    def search_for_specific_offer(self, word, text):
        # –≤—ã–≤–æ–¥ –∑–∞–ø—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        for i in text.split('.'):
            if word in i:
                return i.replace(word, f"___{word}___")


@dp.message_handler(state=WriteAReview.waiting_for_a_review)
async def process_gender(message: types.Message, state: FSMContext):
    # –æ—Ç–≤–µ—Ç–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    global valid_link
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton(text='üìù–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                                          callback_data=f"waiting_for_review"
                                                        f" {valid_link}"))
    if len(message.text) > 100:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        await bot.send_message(message.from_user.id, f'üò†–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤'
                                                     f' –≤ –æ—Ç–∑—ã–≤–µ –±–æ–ª—å—à–µ, —á–µ–º 100 –Ω–∞ {len(message.text) - 100}',
                               reply_markup=markup)
    else:
        if valid_link:
            suspicions = ObsceneSpeechFilter(message.text.lower().replace(" ", ""))
            not_like = suspicions.check()
            if not not_like:
                cur.execute("INSERT INTO user_reviews VALUES(?, ?, ?)",
                            (message.from_user.id, valid_link, message.text))
                con.commit()
                valid_link = ''
                await bot.send_message(message.from_user.id, f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ü´∂')
            else:
                a = suspicions.search_for_specific_offer(not_like, message.text)
                if a:
                    await bot.send_message(message.from_user.id, f'üò≤–ü–æ—Ö–æ–∂–µ, –∫–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞'
                                                                 f' –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞'
                                                                 f'\n'
                                                                 f'\n–í–∞—à –æ—Ç–∑—ã–≤:'
                                                                 f'\n{a}'
                                                                 f'\n'
                                                                 f'\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–µ–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞üòä',
                                           parse_mode="Markdown", reply_markup=markup)
                else:
                    await bot.send_message(message.from_user.id, f'üò≤–ü–æ—Ö–æ–∂–µ, –∫–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞'
                                                                 f' –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞'
                                                                 f'\n'
                                                                 f'\n–ù–π–¥–µ–Ω–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {not_like}'
                                                                 f'\n'
                                                                 f'\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–µ–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞üòä',
                                           parse_mode="Markdown", reply_markup=markup)
        else:
            await bot.send_message(message.from_user.id, f'üò¶–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å—Å—ã–ª–∫–∞–º–∏'
                                                         f'\n'
                                                         f'\nüòï–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –µ—â–µ —Ä–∞–∑', reply_markup=markup)
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)
